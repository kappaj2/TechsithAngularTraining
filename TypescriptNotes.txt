let x: Number = 2;
x = 3;

interface Profile {
    name: string,
    id: number
}

let getId = function (profile1: Profile) {
    return profile1.id;
}

class Car{
    private color: string;

    constructor(color: string) {
        this.color = color;
    }

    getColor() {
        return this.color;
    }
}
const redCar = new Car('red');
console.log(redCar.getColor());



OR different constructor style


interface Profile {
    name: string,
    id: number
}

let getId = function (profile1: Profile) {
    return profile1.id;
}

class Car{
    private color: string;

    constructor(private _color?: string) {
    }

    get Color() {
        return this._color;
    }
}
const redCar = new Car('red');
console.log(redCar.Color;




=== Extending class


interface Profile {
    name: string,
    id: number
}

let getId = function (profile1: Profile) {
    return profile1.id;
}

class Car{
    private color: string;
    public maxSpeed: number;
    protected price: number;
}

class Toyota extends Car {

    constructor(maxSpeed, color, price) {
        super();
        this.maxSpeed = maxSpeed;
        this.price = price;
        //  Cannot access private var here.
    }
}
